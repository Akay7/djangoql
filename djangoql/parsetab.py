
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionNAME DOT OR AND NOT IN TRUE FALSE NONE STRING_VALUE FLOAT_VALUE INT_VALUE PAREN_L PAREN_R EQUALS NOT_EQUALS GREATER GREATER_EQUAL LESS LESS_EQUAL\n        expression : PAREN_L expression PAREN_R\n        \n        expression : expression logical expression\n        \n        expression : name comparison number_or_string\n                   | name comparison_equality boolean_value\n                   | name comparison_equality none\n                   | name comparison_in_list const_list_value\n        \n        name : name_parts\n        \n        name_parts : name_parts DOT NAME\n                   | NAME\n        \n        logical : AND\n                | OR\n        \n        comparison : comparison_equality\n                   | comparison_greater_less\n        \n        comparison_equality : EQUALS\n                            | NOT_EQUALS\n        \n        comparison_greater_less : GREATER\n                                | GREATER_EQUAL\n                                | LESS\n                                | LESS_EQUAL\n        \n        comparison_in_list : IN\n                           | NOT IN\n        \n        const_value : number_or_string\n                    | none\n                    | boolean_value\n        \n        number_or_string : INT_VALUE\n                         | FLOAT_VALUE\n                         | STRING_VALUE\n        \n        none : NONE\n        \n        boolean_value : true\n                      | false\n        \n        true : TRUE\n        \n        false : FALSE\n        \n        const_list_value : PAREN_L const_value_list PAREN_R\n        \n        const_value_list : const_value_list const_value\n        \n        const_value_list : const_value\n        '
    
_lr_action_items = {'PAREN_L':([0,2,6,7,8,12,16,38,],[2,2,2,-10,-11,37,-20,-21,]),'NAME':([0,2,6,7,8,22,],[5,5,5,-10,-11,39,]),'$end':([1,23,24,25,26,27,28,29,30,31,32,33,34,35,36,45,],[0,-2,-1,-3,-25,-26,-27,-4,-5,-29,-30,-28,-31,-32,-6,-33,]),'AND':([1,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,45,],[7,7,7,-1,-3,-25,-26,-27,-4,-5,-29,-30,-28,-31,-32,-6,-33,]),'OR':([1,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,45,],[8,8,8,-1,-3,-25,-26,-27,-4,-5,-29,-30,-28,-31,-32,-6,-33,]),'EQUALS':([3,4,5,39,],[14,-7,-9,-8,]),'NOT_EQUALS':([3,4,5,39,],[15,-7,-9,-8,]),'IN':([3,4,5,17,39,],[16,-7,-9,38,-8,]),'NOT':([3,4,5,39,],[17,-7,-9,-8,]),'GREATER':([3,4,5,39,],[18,-7,-9,-8,]),'GREATER_EQUAL':([3,4,5,39,],[19,-7,-9,-8,]),'LESS':([3,4,5,39,],[20,-7,-9,-8,]),'LESS_EQUAL':([3,4,5,39,],[21,-7,-9,-8,]),'DOT':([4,5,39,],[22,-9,-8,]),'PAREN_R':([9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,40,41,42,43,44,45,46,],[24,-2,-1,-3,-25,-26,-27,-4,-5,-29,-30,-28,-31,-32,-6,45,-35,-22,-23,-24,-33,-34,]),'INT_VALUE':([10,11,13,14,15,18,19,20,21,26,27,28,31,32,33,34,35,37,40,41,42,43,44,46,],[26,-12,-13,-14,-15,-16,-17,-18,-19,-25,-26,-27,-29,-30,-28,-31,-32,26,26,-35,-22,-23,-24,-34,]),'FLOAT_VALUE':([10,11,13,14,15,18,19,20,21,26,27,28,31,32,33,34,35,37,40,41,42,43,44,46,],[27,-12,-13,-14,-15,-16,-17,-18,-19,-25,-26,-27,-29,-30,-28,-31,-32,27,27,-35,-22,-23,-24,-34,]),'STRING_VALUE':([10,11,13,14,15,18,19,20,21,26,27,28,31,32,33,34,35,37,40,41,42,43,44,46,],[28,-12,-13,-14,-15,-16,-17,-18,-19,-25,-26,-27,-29,-30,-28,-31,-32,28,28,-35,-22,-23,-24,-34,]),'NONE':([11,14,15,26,27,28,31,32,33,34,35,37,40,41,42,43,44,46,],[33,-14,-15,-25,-26,-27,-29,-30,-28,-31,-32,33,33,-35,-22,-23,-24,-34,]),'TRUE':([11,14,15,26,27,28,31,32,33,34,35,37,40,41,42,43,44,46,],[34,-14,-15,-25,-26,-27,-29,-30,-28,-31,-32,34,34,-35,-22,-23,-24,-34,]),'FALSE':([11,14,15,26,27,28,31,32,33,34,35,37,40,41,42,43,44,46,],[35,-14,-15,-25,-26,-27,-29,-30,-28,-31,-32,35,35,-35,-22,-23,-24,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,6,],[1,9,23,]),'name':([0,2,6,],[3,3,3,]),'name_parts':([0,2,6,],[4,4,4,]),'logical':([1,9,23,],[6,6,6,]),'comparison':([3,],[10,]),'comparison_equality':([3,],[11,]),'comparison_in_list':([3,],[12,]),'comparison_greater_less':([3,],[13,]),'number_or_string':([10,37,40,],[25,42,42,]),'boolean_value':([11,37,40,],[29,44,44,]),'none':([11,37,40,],[30,43,43,]),'true':([11,37,40,],[31,31,31,]),'false':([11,37,40,],[32,32,32,]),'const_list_value':([12,],[36,]),'const_value_list':([37,],[40,]),'const_value':([37,40,],[41,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> PAREN_L expression PAREN_R','expression',3,'p_expression_parens','parser.py',23),
  ('expression -> expression logical expression','expression',3,'p_expression_logical','parser.py',29),
  ('expression -> name comparison number_or_string','expression',3,'p_expression_comparison','parser.py',35),
  ('expression -> name comparison_equality boolean_value','expression',3,'p_expression_comparison','parser.py',36),
  ('expression -> name comparison_equality none','expression',3,'p_expression_comparison','parser.py',37),
  ('expression -> name comparison_in_list const_list_value','expression',3,'p_expression_comparison','parser.py',38),
  ('name -> name_parts','name',1,'p_name','parser.py',44),
  ('name_parts -> name_parts DOT NAME','name_parts',3,'p_name_parts','parser.py',50),
  ('name_parts -> NAME','name_parts',1,'p_name_parts','parser.py',51),
  ('logical -> AND','logical',1,'p_logical','parser.py',60),
  ('logical -> OR','logical',1,'p_logical','parser.py',61),
  ('comparison -> comparison_equality','comparison',1,'p_comparison','parser.py',67),
  ('comparison -> comparison_greater_less','comparison',1,'p_comparison','parser.py',68),
  ('comparison_equality -> EQUALS','comparison_equality',1,'p_comparison_equality','parser.py',74),
  ('comparison_equality -> NOT_EQUALS','comparison_equality',1,'p_comparison_equality','parser.py',75),
  ('comparison_greater_less -> GREATER','comparison_greater_less',1,'p_comparison_greater_less','parser.py',81),
  ('comparison_greater_less -> GREATER_EQUAL','comparison_greater_less',1,'p_comparison_greater_less','parser.py',82),
  ('comparison_greater_less -> LESS','comparison_greater_less',1,'p_comparison_greater_less','parser.py',83),
  ('comparison_greater_less -> LESS_EQUAL','comparison_greater_less',1,'p_comparison_greater_less','parser.py',84),
  ('comparison_in_list -> IN','comparison_in_list',1,'p_comparison_in_list','parser.py',90),
  ('comparison_in_list -> NOT IN','comparison_in_list',2,'p_comparison_in_list','parser.py',91),
  ('const_value -> number_or_string','const_value',1,'p_const_value','parser.py',100),
  ('const_value -> none','const_value',1,'p_const_value','parser.py',101),
  ('const_value -> boolean_value','const_value',1,'p_const_value','parser.py',102),
  ('number_or_string -> INT_VALUE','number_or_string',1,'p_number_or_string','parser.py',108),
  ('number_or_string -> FLOAT_VALUE','number_or_string',1,'p_number_or_string','parser.py',109),
  ('number_or_string -> STRING_VALUE','number_or_string',1,'p_number_or_string','parser.py',110),
  ('none -> NONE','none',1,'p_none','parser.py',116),
  ('boolean_value -> true','boolean_value',1,'p_boolean_value','parser.py',122),
  ('boolean_value -> false','boolean_value',1,'p_boolean_value','parser.py',123),
  ('true -> TRUE','true',1,'p_true','parser.py',129),
  ('false -> FALSE','false',1,'p_false','parser.py',135),
  ('const_list_value -> PAREN_L const_value_list PAREN_R','const_list_value',3,'p_const_list_value','parser.py',141),
  ('const_value_list -> const_value_list const_value','const_value_list',2,'p_const_value_list','parser.py',147),
  ('const_value_list -> const_value','const_value_list',1,'p_const_value_list_single','parser.py',153),
]
